<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>高并发——epoll反应堆模型</title>
    <url>/2020/05/16/%E9%AB%98%E5%B9%B6%E5%8F%91%E2%80%94%E2%80%94epoll%E5%8F%8D%E5%BA%94%E5%A0%86%E6%A8%A1%E5%9E%8B/</url>
    <content><![CDATA[<p>=========================================================<br>下面代码实现的思想：epoll反应堆模型：（ libevent 网络编程开源库 核心思想）</p>
<p>1.　　普通多路IO转接服务器： 红黑树 ―― 添加待监听的结点 ―― epoll_ctl ―― EPOLLIN ―― fd ―― 监听 ―― epoll_wait ――<a id="more"></a></p>
<p>　　返回满足监听事件的fd的总个数 ―― 传出参数 events数组 ―― 内部元素 ――满足对应监听事件的fd</p>
<p>　　―― 判断对应事件 ―― Accept、Read。――循环 epoll_wait 监听</p>
<p>2.　　epoll反应堆模型： 创建红黑树 ―― 添加监听结点 ―― epoll_ctl ―― EPOLLIN ―― fd ―― 监听 ―― epoll_wait ―― 将结点从树上摘下</p>
<p>　　――处理数据 ―― 修改fd的监听事件 ―― EPOLLOUT ―― 重新添加到红黑树 ―― 监听 ―― epoll_wait ―― 写数据到</p>
<p>　　客户端 ―― 再将结点从树上摘下 ―― 修改监听时间 ―― EPOLLIN ―― 挂上红黑树监听。</p>
<p>　　添加监听写事件的目的： “滑动窗口”已满，绕过写。epoll_wait满足后再进行写。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/epoll.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IP <span class="meta-string">"127.0.0.1"</span> </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> port 7095</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXEVENT 1024 </span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">myevent_s</span>&#123;</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> fd; <span class="comment">//所要监听的文件描述符；</span></span><br><span class="line">	<span class="keyword">int</span> status; <span class="comment">// 是否被挂载在监听红黑树上；</span></span><br><span class="line">	<span class="keyword">void</span> *arg; <span class="comment">// 指向自己的结构体指针；</span></span><br><span class="line">	<span class="keyword">int</span> events; <span class="comment">// 监听事件</span></span><br><span class="line">	<span class="keyword">void</span> (*call_back)(<span class="keyword">int</span> fd, <span class="keyword">int</span> event, <span class="keyword">void</span> *arg); <span class="comment">// 回调函数</span></span><br><span class="line">	<span class="keyword">long</span> last_active;<span class="comment">// 连接时间</span></span><br><span class="line">	<span class="keyword">char</span> buf[BUFSIZ];</span><br><span class="line">	<span class="keyword">int</span> len;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> g_epfd;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">myevent_s</span> <span class="title">g_events</span>[<span class="title">BUFSIZ</span> + 1];</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">recvdata</span><span class="params">(<span class="keyword">int</span> fd, <span class="keyword">int</span> events, <span class="keyword">void</span> *arg)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sendData</span><span class="params">(<span class="keyword">int</span> fd, <span class="keyword">int</span> events, <span class="keyword">void</span> *arg)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">eventAdd</span><span class="params">(<span class="keyword">int</span> epfd, <span class="keyword">int</span> events, struct myevent_s *ev)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Fcntl</span><span class="params">(<span class="keyword">int</span> fd)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> flag = fcntl(fd, F_GETFL);</span><br><span class="line">	flag |= O_NONBLOCK;</span><br><span class="line">	<span class="keyword">int</span> ret = fcntl(fd, F_SETFL, flag);</span><br><span class="line">	<span class="keyword">if</span>(ret &lt; <span class="number">0</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%s: fcntl error: %s\n"</span>, __func__, strerror(errno));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">eventSet</span><span class="params">(struct myevent_s *ev, <span class="keyword">int</span> fd, <span class="keyword">void</span> (*call_back)(<span class="keyword">int</span> fd, <span class="keyword">int</span> events, <span class="keyword">void</span> *arg), <span class="keyword">void</span> *arg)</span></span>&#123;</span><br><span class="line">	ev-&gt;fd = fd;</span><br><span class="line">	ev-&gt;events = <span class="number">0</span>;</span><br><span class="line">	ev-&gt;call_back = call_back;</span><br><span class="line">	ev-&gt;status = <span class="number">0</span>;</span><br><span class="line">	ev-&gt;arg = arg;</span><br><span class="line">	<span class="keyword">if</span>(ev-&gt;len &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">		<span class="built_in">memset</span>(ev-&gt;buf, <span class="number">0</span>, <span class="keyword">sizeof</span>(ev-&gt;buf));</span><br><span class="line">		ev-&gt;len = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	ev-&gt;last_active = time(<span class="literal">NULL</span>);</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">eventAdd</span><span class="params">(<span class="keyword">int</span> epfd, <span class="keyword">int</span> events, struct myevent_s *ev)</span></span>&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span> <span class="title">evs</span> = &#123;</span><span class="number">0</span>, &#123;<span class="number">0</span>&#125;&#125;;</span><br><span class="line">	<span class="keyword">int</span> op = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	evs.data.ptr = ev;</span><br><span class="line">	evs.events = ev-&gt;events = events;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span>(ev-&gt;status == <span class="number">0</span>)&#123;</span><br><span class="line">		op = EPOLL_CTL_ADD;</span><br><span class="line">		ev-&gt;status = <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d is added\n"</span>, ev-&gt;fd);</span><br><span class="line">		<span class="comment">//return;</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">char</span> *str;</span><br><span class="line">	<span class="keyword">if</span>(events == EPOLLIN)&#123;</span><br><span class="line">		str = <span class="string">"EPOLLIN"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(events == EPOLLOUT)&#123;</span><br><span class="line">		str = <span class="string">"EPOLLOUT"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(events == (EPOLLIN | EPOLLET))&#123;</span><br><span class="line">		str = <span class="string">"EPOLLIN | EPOLLET"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> ret = epoll_ctl(g_epfd, op, ev-&gt;fd, &amp;evs);</span><br><span class="line">	<span class="keyword">if</span>(ret &lt; <span class="number">0</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"Events add failed fd[%d], events[%s]\n"</span>, ev-&gt;fd, str);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"Events add OK fd[%d], events[%s]\n"</span>, ev-&gt;fd, str);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">eventDel</span><span class="params">(<span class="keyword">int</span> epfd, struct myevent_s *ev)</span></span>&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span> <span class="title">evs</span> = &#123;</span><span class="number">0</span>, &#123;<span class="number">0</span>&#125;&#125;;</span><br><span class="line">	<span class="keyword">if</span>(ev-&gt;status != <span class="number">1</span>)&#123;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	evs.data.ptr = <span class="literal">NULL</span>;</span><br><span class="line">	ev-&gt;status = <span class="number">0</span>;</span><br><span class="line">	epoll_ctl(g_epfd, EPOLL_CTL_DEL, ev-&gt;fd, &amp;evs);</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">acceptance</span><span class="params">(<span class="keyword">int</span> lfd, <span class="keyword">int</span> events, <span class="keyword">void</span> *arg)</span></span>&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">caddr</span>;</span></span><br><span class="line">	<span class="keyword">socklen_t</span> len = <span class="keyword">sizeof</span>(caddr);</span><br><span class="line">	<span class="keyword">int</span> cfd, i = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span>((cfd = accept(lfd, (struct sockaddr *)&amp;caddr, &amp;len)) == <span class="number">-1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(errno != EAGAIN &amp;&amp; errno != EINTR)</span><br><span class="line">		&#123;</span><br><span class="line">			sleep(<span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%s:accept,%s\n"</span>,__func__, strerror(errno));</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">do</span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; BUFSIZ; i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(g_events[i].status == <span class="number">0</span>)&#123;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span>(i == BUFSIZ)&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"Error: too any people\n"</span>);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//Fcntl(cfd);</span></span><br><span class="line">		<span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">if</span>((flag = fcntl(cfd, F_SETFL, O_NONBLOCK)) &lt; <span class="number">0</span>) <span class="comment">//将cfd也设置为非阻塞</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"%s: fcntl nonblocking failed, %s\n"</span>, __func__, strerror(errno));</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		eventSet(&amp;g_events[i], cfd, recvdata, &amp;g_events[i]);</span><br><span class="line">		eventAdd(g_epfd, EPOLLIN, &amp;g_events[i]);</span><br><span class="line">	&#125;<span class="keyword">while</span>(<span class="number">0</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%s is connected\n"</span>, inet_ntoa(caddr.sin_addr));</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">recvdata</span><span class="params">(<span class="keyword">int</span> fd, <span class="keyword">int</span> events, <span class="keyword">void</span> *arg)</span></span>&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">myevent_s</span> *<span class="title">ev</span> = (<span class="title">struct</span> <span class="title">myevent_s</span> *)<span class="title">arg</span>;</span></span><br><span class="line">	<span class="keyword">int</span> len;</span><br><span class="line"></span><br><span class="line">	len = recv(fd, ev-&gt;buf, <span class="keyword">sizeof</span>(ev-&gt;buf), <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">	eventDel(g_epfd, ev);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span>(len &gt; <span class="number">0</span>)&#123;</span><br><span class="line">		ev-&gt;buf[len] = <span class="string">'\0'</span>;</span><br><span class="line">		ev-&gt;len = len;</span><br><span class="line"></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"C[%d]: %s \n"</span>, fd, ev-&gt;buf);</span><br><span class="line"></span><br><span class="line">		eventSet(ev, fd, sendData, ev);</span><br><span class="line">		eventAdd(g_epfd, EPOLLOUT, ev);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(len == <span class="number">0</span>)&#123;</span><br><span class="line">		<span class="built_in">close</span>(ev-&gt;fd);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"[fd=%d] pos[%ld], closed\n"</span>, fd, ev-g_events);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="built_in">close</span>(ev-&gt;fd);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%s Error: %s \n"</span>, __func__, strerror(errno));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sendData</span><span class="params">(<span class="keyword">int</span> fd, <span class="keyword">int</span> events, <span class="keyword">void</span> *arg)</span></span>&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">myevent_s</span> *<span class="title">ev</span> = (<span class="title">struct</span> <span class="title">myevent_s</span> *)<span class="title">arg</span>;</span></span><br><span class="line">	<span class="keyword">int</span> len;</span><br><span class="line"></span><br><span class="line">	len = <span class="built_in">write</span>(ev-&gt;fd, ev-&gt;buf, ev-&gt;len);</span><br><span class="line"></span><br><span class="line">	eventDel(g_epfd, ev);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span>(len &gt; <span class="number">0</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"send[fd = %d] [%d] %s\n"</span>, ev-&gt;fd, len, ev-&gt;buf);</span><br><span class="line">		eventSet(ev, fd, recvdata, ev);</span><br><span class="line">		eventAdd(g_epfd, EPOLLIN, ev);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="built_in">close</span>(ev-&gt;fd);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%s ERROR: %s"</span>, __func__, strerror(errno));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initSocket</span><span class="params">(<span class="keyword">int</span> efd)</span></span>&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">saddr</span>;</span></span><br><span class="line">	<span class="keyword">int</span> lfd, ret;</span><br><span class="line">	<span class="keyword">socklen_t</span> len;</span><br><span class="line"></span><br><span class="line">	lfd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">	<span class="keyword">if</span>(lfd &lt; <span class="number">0</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%s create socket error:%s\n"</span>, __func__, strerror(errno));</span><br><span class="line">		<span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	Fcntl(lfd);</span><br><span class="line"></span><br><span class="line">	saddr.sin_addr.s_addr = inet_addr(IP);</span><br><span class="line">	saddr.sin_family = AF_INET;</span><br><span class="line">	saddr.sin_port = htons(port);</span><br><span class="line"></span><br><span class="line">	len = <span class="keyword">sizeof</span>(saddr);</span><br><span class="line"></span><br><span class="line">	ret = bind(lfd, (struct sockaddr*)&amp;saddr, len);</span><br><span class="line">	<span class="keyword">if</span>(ret &lt; <span class="number">0</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%s bind error: %s"</span>, __func__, strerror(errno));</span><br><span class="line">		<span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">listen</span>(lfd, <span class="number">128</span>);</span><br><span class="line"></span><br><span class="line">	eventSet(&amp;g_events[BUFSIZ], lfd, acceptance, &amp;g_events[BUFSIZ]);</span><br><span class="line">	eventAdd(g_epfd, EPOLLIN, &amp;g_events[BUFSIZ]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	g_epfd = epoll_create(BUFSIZ + <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">if</span>(g_epfd &lt; <span class="number">0</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%s epoll cteate error: %s\n"</span>, __func__, strerror(errno));</span><br><span class="line">		<span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	initSocket(g_epfd);</span><br><span class="line"></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span> <span class="title">evts</span>[<span class="title">BUFSIZ</span> + 1];</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%s:%d is running\n"</span>, IP, port);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">		<span class="keyword">int</span> <span class="built_in">ready</span> = epoll_wait(g_epfd, evts, BUFSIZ + <span class="number">1</span>, <span class="number">1000</span>);</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">ready</span> &lt; <span class="number">0</span>)&#123;</span><br><span class="line">			perror(<span class="string">"epoll wait error:"</span>);</span><br><span class="line">			<span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">ready</span>; ++i)&#123;</span><br><span class="line"></span><br><span class="line">			<span class="class"><span class="keyword">struct</span> <span class="title">myevent_s</span> *<span class="title">ev</span> = (<span class="title">struct</span> <span class="title">myevent_s</span> *)<span class="title">evts</span>[<span class="title">i</span>].<span class="title">data</span>.<span class="title">ptr</span>;</span></span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span>((evts[i].events &amp; EPOLLIN) &amp;&amp; (ev-&gt;events &amp; EPOLLIN))&#123;</span><br><span class="line">				ev-&gt;call_back(ev-&gt;fd, evts[i].events, ev-&gt;arg);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>((evts[i].events &amp; EPOLLOUT) &amp;&amp; (ev-&gt;events &amp; EPOLLOUT))&#123;</span><br><span class="line">				ev-&gt;call_back(ev-&gt;fd, evts[i].events, ev-&gt;arg);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>网络编程</category>
      </categories>
      <tags>
        <tag>Linxu</tag>
        <tag>网络编程</tag>
      </tags>
  </entry>
  <entry>
    <title>wxcnb</title>
    <url>/2020/05/17/wxcnb/</url>
    <content><![CDATA[<p>dfadfasdfsdf</p>
<p>fasd</p>
<p>f</p>
<p>ads</p>
<p>f</p>
]]></content>
  </entry>
</search>
